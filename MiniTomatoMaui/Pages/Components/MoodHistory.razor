@using Azure

@using System.Text.Json
@using System.Diagnostics
@using MiniTomatoMaui.Data
@using MiniTomatoMaui.CosmosDB
@using Microsoft.EntityFrameworkCore

@inject IJSRuntime JsRuntime

<div class="col-xl-10 col-12 offset-xl-1">
    <div class="row" style="display: flex;">
        @if (IsLoading)
        {
            <div class="offset-xl-5 offset-3 loader"></div>
        }
        else
        {
            <div class="col-xl-8 col-12" style="overflow:hidden;">
                <div class="card-styles">

                    <div class="block-header block-header-default">
                        <h3 class="block-title">
                            Happiness History
                        </h3>
                    </div>

                    <h1 class="block-content block-content-full flex-grow-1 d-flex align-items-center">
                        <canvas id="chartjs-bar" width="1030" height="515" style="display: block; box-sizing:border-box; height: 515px; width: 1030px;"></canvas>
                    </h1>
                </div>
            </div>

            <div class="col-xl-4 col-12" style="overflow:hidden;">
                <div class="card-styles" style="height:100%;">
                    <div class="block-header block-header-default">
                        <h3 class="block-title">Happiness Percentage</h3>
                    </div>

                    <div class="block-content block-content-full flex-grow-1 d-flex align-items-center">
                        <canvas id="chartjs-pie" width="1030" height="515" style="display: block; box-sizing:border-box; height: 515px; width: 1030px;"></canvas>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="col-xl-4 col-12 offset-xl-4">
        <div class="row">
            <div class="col-4 fw-bold">
                Latest Mood:
            </div>
            <div class="col-8 text-muted">
                @Model?.RawText
            </div>
        </div>
        <div class="row">
            <div class="col-4 fw-bold">
                Overall:
            </div>
            <div class="col-8 text-muted">
                @Model?.Sentiment
            </div>
        </div>
        <div class="row">
            <div class="col-4 fw-bold">
                Recorded At:
            </div>
            <div class="col-8 text-muted">
                @Model?.CreatedAt
            </div>
        </div>
    </div>

    <div class="mt-4 mb-3 float-end">
        <button class="btn btn-primary btn-block" @onclick="(() => {ContinueToState(SessionState.Input);})">Start Over</button>
    </div>

</div>

@code {
    [Parameter]
    public UserRecord Model { get; set; }

    [Parameter]
    public Action<SessionState> Callback { get; set; }

    [CascadingParameter]
    public UserRecordDbContext DbContext { get; set; }

    public bool IsLoading { get; set; } = true;

    private IJSObjectReference ChartsModule { get; set; }
    public List<ChartData> PieChartData { get; set; } = new();
    public List<ChartData> BarChartData { get; set; } = new();
    public Decimal[] Percentages { get; set; }

    public List<UserRecord> AllRecords { get; set; } = new();

    public async Task GetUserRecords()
    {
        AllRecords = await DbContext.UserRecords.ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                // Show Loader
                IsLoading = true;
                StateHasChanged();

                await GetUserRecords();

                // Check for latest record
                if (Model.ConfidenceScores is null)
                {
                    Model = AllRecords.OrderByDescending(x => x.CreatedAt).FirstOrDefault();
                }

                IsLoading = false;
                StateHasChanged();

                ChartsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", new CancellationToken(), "./js/GeneratedJS/ItemCharts.js");
                RenderCharts();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Unable to render charts: {ex}");
            }
        }
    }

    public async void RenderCharts()
    {
        try
        {
            // Pie Chart Data
            decimal totalCount = AllRecords.Count();
            var happyPercentage = Math.Round((decimal)(AllRecords.Where(x => x.Sentiment == Mood.Positive).Count() / totalCount) * 100, 2);
            var sadPercentage = Math.Round((decimal)(AllRecords.Where(x => x.Sentiment == Mood.Negative).Count() / totalCount) * 100, 2);
            var neutralPercentage = Math.Round(((decimal)AllRecords.Where(x => x.Sentiment == Mood.Neutral).Count() / totalCount) * 100, 2);

            Percentages = new decimal[] { happyPercentage, sadPercentage, neutralPercentage };

            // Date Labels
            foreach (var record in AllRecords)
            {
                BarChartData.Add(new ChartData()
                    {
                        Date = record.CreatedAt,
                        SentimentScore = (decimal)record.Score,
                        Text = record.RawText
                    });
            }

            var dates = BarChartData.Select(x => x.Date.ToString("MM/dd/yyyy") ).ToArray();
            var sentimentScores = BarChartData.Select(x => x.SentimentScore).ToArray();

            await ChartsModule.InvokeVoidAsync("RenderCharts", new CancellationToken(), dates, sentimentScores, Percentages);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Issue rendering charts: {ex}");
        }
    }

    public void ContinueToState(SessionState state)
    {
        Callback?.Invoke(state);
    }
}
