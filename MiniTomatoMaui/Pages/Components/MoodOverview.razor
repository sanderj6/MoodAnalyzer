@page "/intelligence"
@using Azure

@using System.Text.Json
@using System.Diagnostics
@using MiniTomatoMaui.CosmosDB
@using MiniTomatoMaui.Data

<div class="col-xl-8 col-10 offset-xl-2 offset-1 mt-4">
    @if (IsLoading)
    {
        <div class="offset-xl-5 offset-3 loader"></div>
    }
    else
    {
        if (Sentiment is not null)
        {
            foreach (var sentence in Sentiment?.Sentences)
            {
                var isAccurate = Model.Sentences.Any(x => x.Text == sentence.Text);
                var isDisabled = !isAccurate;
                var disabledText = isAccurate ? "" : "line-through";

                <div class="row mb-3 align-content-center">

                    <div class="col-xl-6 col-4 text-muted" style="text-decoration:@disabledText">
                        @sentence.Text
                    </div>
                    <div class="col-3" style="text-decoration:@disabledText">
                        @sentence.Sentiment
                    </div>

                    <div class="col-3 float-end">
                        <button class="btn btn-primary btn-block" disabled="@isDisabled" @onclick="(() => {UpdateUserRecord(sentence);})">Not Accurate</button>
                    </div>
                </div>
            }
        }

        <div class="offset-1 mt-4">
            Day Score: <b>@Model?.Score %</b>
        </div>

        <div class="mt-4 float-end">
            <button class="btn btn-primary btn-block" @onclick="(async() => {await ContinueToState(SessionState.Input);})">Back</button>
            <button class="btn btn-primary btn-block" @onclick="(async() => {await ContinueToState(SessionState.History);})">Continue</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public UserRecord Model { get; set; }

    [Parameter]
    public DocumentSentiment Sentiment { get; set; }

    [Parameter]
    public Action<SessionState> Callback { get; set; }

    [CascadingParameter]
    public UserRecordDbContext DbContext { get; set; }

    public bool IsLoading { get; set; }

    public async Task ContinueToState(SessionState state)
    {
        // Loader On
        IsLoading = true;
        StateHasChanged();

        // Save Record
        if (state == SessionState.History)
        {
            await SaveRecord();
        }

        // Loader Off
        IsLoading = false;
        StateHasChanged();

        Callback?.Invoke(state);
    }

    public void UpdateUserRecord(SentenceSentiment sentence)
    {
        try
        {
            // Remove Sentence and Score from sentiment
            var removalSentence = Model.Sentences.Where(x => x.Text == sentence.Text).FirstOrDefault();
            Model.Sentences.Remove(removalSentence);

            var removeScore = Model.ConfidenceScores.Where(x => x.ConfidenceType.ToString().ToUpper() == sentence.Sentiment.ToString().ToUpper()).FirstOrDefault();
            Model.ConfidenceScores.Remove(removeScore);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Issue updating user record: {ex}");
        }
    }

    public async Task SaveRecord()
    {
        try
        {
            await DbContext.UserRecords.AddAsync(Model);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Issue saving record to database: {ex}");
        }
    }
}
